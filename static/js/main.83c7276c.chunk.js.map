{"version":3,"sources":["components/Tempapp.js","App.js","reportWebVitals.js","index.js"],"names":["Tempapp","useState","city","setCity","iCon","setICon","search","setSearch","f","setF","useEffect","a","url","fetch","response","json","resJson","cod","weather","console","log","fetchApi","urli","icon","className","type","onChange","event","target","value","src","alt","main","name","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA8EeA,EA1EC,WACZ,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,UAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkBN,oBAAS,GAA3B,mBAAOO,EAAP,KAAUC,EAAV,KAEAC,qBAAU,YACQ,uCAAG,gCAAAC,EAAA,6DACPC,EADO,4DACoDN,EADpD,iEAEUO,MAAMD,GAFhB,cAEPE,EAFO,gBAISA,EAASC,OAJlB,OAOO,SAHdC,EAJO,QAODC,KAA4B,KAAXX,GACzBH,EAAQa,GACRX,EAAQW,EAAQE,QAAQ,IACxBT,GAAK,GACLU,QAAQC,IAAI,4BAGZX,GAAK,GAETU,QAAQC,IAAIJ,GAhBC,2CAAH,qDAkBdK,KACD,CAACf,IAEJ,IAAMgB,EAAI,4CAAwClB,EAAKmB,KAA7C,WAEV,OACI,mCAEI,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,uBAAOC,KAAK,SAASD,UAAU,aAAaE,SAAU,SAACC,GACnDpB,EAAUoB,EAAMC,OAAOC,YAK1BrB,EAGG,gCACI,sBAAKgB,UAAU,OAAf,UACI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAOM,IAAKR,EAAMS,IAAI,KACrC,mCAAM3B,EAAK4B,KAAX,UAEJ,qBAAIR,UAAU,WAAd,UACI,mBAAGA,UAAU,uBAA0BtB,EAAK+B,QAGhD,qBAAIT,UAAU,OAAd,UACKtB,EAAK8B,KAAKE,KADf,aAIA,qBAAIV,UAAU,cAAd,oBAAoCtB,EAAK8B,KAAKG,SAA9C,mBAAqEjC,EAAK8B,KAAKI,SAA/E,iBAGJ,qBAAKZ,UAAU,cACf,qBAAKA,UAAU,cACf,qBAAKA,UAAU,mBArBnB,mBAAGA,UAAU,WAAb,iC,MCnCTa,MANf,WACE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.83c7276c.chunk.js","sourcesContent":["//Full Mini Project:-ðŸ”´ Create Live Search Weather App using React JS\r\nimport React, { useEffect, useState } from 'react';\r\nimport './css/style.css';\r\n\r\nconst Tempapp = () => {\r\n    const [city, setCity] = useState(null);\r\n    const [iCon, setICon] = useState([]);\r\n    const [search, setSearch] = useState(\"mumbai\");\r\n    const [f, setF] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=42e90b9a7637705bc7c285fe124bf97b`;\r\n            const response = await fetch(url);\r\n            // console.log(response);\r\n            const resJson = await response.json();\r\n\r\n            // setICon(resJson);\r\n            if (resJson.cod !== \"404\" && search !== \"\") {\r\n                setCity(resJson);\r\n                setICon(resJson.weather[0])\r\n                setF(true)\r\n                console.log(\"$$$$$$$$$$$$$$$$$ FOUND\");\r\n            }\r\n            else {\r\n                setF(false);\r\n            }\r\n            console.log(resJson);\r\n        };\r\n        fetchApi();\r\n    }, [search]);\r\n\r\n    const urli = `https://openweathermap.org/img/wn/${iCon.icon}@2x.png`;\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"box\">\r\n                <div className=\"inputData\">\r\n                    <input type=\"search\" className=\"inputField\" onChange={(event) => {\r\n                        setSearch(event.target.value);\r\n                    }} />\r\n                </div>\r\n\r\n                {\r\n                    !f ? (\r\n                        <p className=\"errorMsg\">No Data Found</p>\r\n                    ) : (\r\n                        <div >\r\n                            <div className=\"info\">\r\n                                <div className=\"iconAndName\">\r\n                                    <img className=\"icon\" src={urli} alt=\"\" />\r\n                                    <h2> {iCon.main} </h2>\r\n                                </div>\r\n                                <h1 className=\"location\">\r\n                                    <i className=\"fas fa-street-view\"></i>{city.name}\r\n                                </h1>\r\n\r\n                                <h2 className=\"temp\">\r\n                                    {city.main.temp}Â°Cel\r\n                                </h2>\r\n\r\n                                <h3 className=\"tempmin_max\"> Min : {city.main.temp_min}Â°Cel | Max : {city.main.temp_max}Â°Cel </h3>\r\n                            </div>\r\n\r\n                            <div className=\"wave -one\"></div>\r\n                            <div className=\"wave -two\"></div>\r\n                            <div className=\"wave -three\"></div>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tempapp\r\n","//Full Mini Project:-ðŸ”´ Create Live Search Weather App using React JS\nimport React from 'react';\nimport Tempapp from './components/Tempapp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Tempapp />\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//Full Mini Project:-ðŸ”´ Create Live Search Weather App using React JS\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}